{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyD8cry4X6dHOLVBrHaKH9PvPCqygC8WcRE\",\n  authDomain: \"crown-db-137f1.firebaseapp.com\",\n  databaseURL: \"https://crown-db-137f1.firebaseio.com\",\n  projectId: \"crown-db-137f1\",\n  storageBucket: \"crown-db-137f1.appspot.com\",\n  messagingSenderId: \"183125673282\",\n  appId: \"1:183125673282:web:c16cf816c865950c95f4db\",\n  measurementId: \"G-DRZX3YJEY2\"\n};\nfirebase.initializeApp(config);\nexport const createUserProfileDocument = async (userAuth, additionlData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionlData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n};\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\nexport default firebase;","map":{"version":3,"sources":["C:/Users/admin/Desktop/react/crown3/client/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","createUserProfileDocument","userAuth","additionlData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","convertCollectionsSnapshotToMap","collections","transformedCollection","docs","map","title","items","data","routeName","encodeURI","toLowerCase","id","reduce","accumulator","getCurrentUser","Promise","resolve","reject","unsubscribe","auth","onAuthStateChanged","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\n\r\nconst config = \r\n{\r\n    apiKey: \"AIzaSyD8cry4X6dHOLVBrHaKH9PvPCqygC8WcRE\",\r\n    authDomain: \"crown-db-137f1.firebaseapp.com\",\r\n    databaseURL: \"https://crown-db-137f1.firebaseio.com\",\r\n    projectId: \"crown-db-137f1\",\r\n    storageBucket: \"crown-db-137f1.appspot.com\",\r\n    messagingSenderId: \"183125673282\",\r\n    appId: \"1:183125673282:web:c16cf816c865950c95f4db\",\r\n    measurementId: \"G-DRZX3YJEY2\"\r\n};\r\n\r\nfirebase.initializeApp(config);\r\n\r\nexport const createUserProfileDocument = async (userAuth, additionlData) => {\r\n    if(!userAuth)return;\r\n\r\n    const userRef = firestore.doc(`users/${userAuth.uid}`);\r\n\r\n    const snapShot = await userRef.get();\r\n\r\n    if(!snapShot.exists){\r\n        const { displayName, email}=userAuth;\r\n        const createdAt= new Date();\r\n        try{\r\n            await userRef.set({\r\n                displayName,\r\n                email,\r\n                createdAt,\r\n                ...additionlData\r\n            });\r\n        }catch(error){\r\n            console.log('error creating user',error.message);\r\n        }\r\n    }\r\n    return userRef;\r\n}; \r\n\r\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) =>{\r\n    const collectionRef = firestore.collection(collectionKey);\r\n    \r\n    const batch= firestore.batch();\r\n    objectsToAdd.forEach(obj =>{\r\n        const newDocRef = collectionRef.doc();\r\n        batch.set(newDocRef, obj);\r\n    });\r\n    return await batch.commit();\r\n};\r\n\r\nexport const convertCollectionsSnapshotToMap = (collections)=>{\r\n    const transformedCollection = collections.docs.map(doc => {\r\n        const {title, items} = doc.data();\r\n\r\n        return{\r\n            routeName: encodeURI(title.toLowerCase()),\r\n            id: doc.id,\r\n            title,\r\n            items\r\n        };\r\n    });\r\n    return transformedCollection.reduce((accumulator,collection) => {\r\n        accumulator[collection.title.toLowerCase()]=collection;\r\n        return accumulator;\r\n    }, {});\r\n};\r\n\r\nexport const getCurrentUser = () =>{\r\n    return new Promise((resolve,reject)=>{\r\n        const unsubscribe = auth.onAuthStateChanged(userAuth=>{\r\n            unsubscribe();\r\n            resolve(userAuth);\r\n        }, reject);\r\n    });\r\n}\r\n\r\nexport const auth = firebase.auth();\r\nexport const firestore=firebase.firestore();\r\n\r\nexport const googleProvider= new firebase.auth.GoogleAuthProvider();\r\ngoogleProvider.setCustomParameters({prompt:'select_account'});\r\nexport const signInWithGoogle=()=>auth.signInWithPopup(googleProvider);\r\n\r\nexport default firebase;"]},"metadata":{},"sourceType":"module"}