{"ast":null,"code":"import { takeLatest, call, put } from 'redux-saga/effects';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from './shop.actions';\nimport ShopActionTypes from './shop.types';\nexport function* fetchCollectionsAsync() {\n  try {\n    const collectionRef = firestore.collection('collections');\n    const snapshot = yield collectionRef.get();\n    const collectionsMap = yield call(convertCollectionsSnapshotToMap, snapshot);\n    yield put(fetchCollectionsSuccess(collectionsMap));\n  } catch (error) {\n    yield put(fetchCollectionsFailure(error.message));\n  } // collectionRef.get().then(snapshot =>{\n  //    const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n  //    dispatch(fetchCollectionsSuccess(collectionsMap));\n  // }).catch(error => dispatch(fetchCollectionsFailure(error.message)));\n\n}\nexport function* fetchCollectionsStart() {\n  yield takeLatests(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}","map":{"version":3,"sources":["C:/Users/admin/Desktop/react/crown3/src/redux/shop/shop.sagas.js"],"names":["takeLatest","call","put","firestore","convertCollectionsSnapshotToMap","fetchCollectionsSuccess","fetchCollectionsFailure","ShopActionTypes","fetchCollectionsAsync","collectionRef","collection","snapshot","get","collectionsMap","error","message","fetchCollectionsStart","takeLatests","FETCH_COLLECTIONS_START"],"mappings":"AAAA,SAAQA,UAAR,EAAoBC,IAApB,EAA0BC,GAA1B,QAAoC,oBAApC;AACA,SAAQC,SAAR,EAAmBC,+BAAnB,QAAyD,+BAAzD;AACA,SACGC,uBADH,EAEGC,uBAFH,QAGO,gBAHP;AAKA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,OAAO,UAAUC,qBAAV,GAAiC;AAErC,MAAG;AACA,UAAMC,aAAa,GAAGN,SAAS,CAACO,UAAV,CAAqB,aAArB,CAAtB;AACA,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB;AACA,UAAMC,cAAc,GAAG,MAAMZ,IAAI,CAACG,+BAAD,EAAkCO,QAAlC,CAAjC;AACA,UAAMT,GAAG,CAACG,uBAAuB,CAACQ,cAAD,CAAxB,CAAT;AACF,GALD,CAKE,OAAMC,KAAN,EAAY;AACX,UAAMZ,GAAG,CAACI,uBAAuB,CAACQ,KAAK,CAACC,OAAP,CAAxB,CAAT;AACF,GAToC,CAYrC;AACA;AACA;AACA;;AACF;AAED,OAAO,UAAUC,qBAAV,GAAkC;AACtC,QAAMC,WAAW,CACdV,eAAe,CAACW,uBADF,EAEdV,qBAFc,CAAjB;AAIF","sourcesContent":["import {takeLatest, call, put} from 'redux-saga/effects';\r\nimport {firestore, convertCollectionsSnapshotToMap} from '../../firebase/firebase.utils';\r\nimport {\r\n   fetchCollectionsSuccess,\r\n   fetchCollectionsFailure\r\n} from './shop.actions';\r\n\r\nimport ShopActionTypes from './shop.types';\r\n\r\nexport function* fetchCollectionsAsync(){\r\n   \r\n   try{\r\n      const collectionRef = firestore.collection('collections');\r\n      const snapshot = yield collectionRef.get();\r\n      const collectionsMap = yield call(convertCollectionsSnapshotToMap, snapshot);\r\n      yield put(fetchCollectionsSuccess(collectionsMap));\r\n   } catch(error){\r\n      yield put(fetchCollectionsFailure(error.message));\r\n   }\r\n   \r\n\r\n   // collectionRef.get().then(snapshot =>{\r\n   //    const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\r\n   //    dispatch(fetchCollectionsSuccess(collectionsMap));\r\n   // }).catch(error => dispatch(fetchCollectionsFailure(error.message)));\r\n}\r\n\r\nexport function* fetchCollectionsStart() {\r\n   yield takeLatests(\r\n      ShopActionTypes.FETCH_COLLECTIONS_START,\r\n      fetchCollectionsAsync \r\n   );\r\n}"]},"metadata":{},"sourceType":"module"}